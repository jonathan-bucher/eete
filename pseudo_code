What do the functions in this package actually do (for non-R users)?

There are four functions included in this package: cdpie, crpie, eete, and ebounds. You can find the actual code for the function and associated description in the .R files in the R folder.

---------------------------------------------------------------

cdpie

This function calculates values of Constant Difference Protected Income Evaluations (CDPIE).

PSEUDO CODE
The function takes the following parameters as inputs:

x: A numeric value or list.
r: The value of r, a scale factor that adjusts the intensity of risk aversion. This parameter is optional if L is provided.
L: The value of L. This parameter is optional if r is provided.

IF the user does not input a value for r OR L (leaving both of them as NULL),
  Define val as a warning message: "Please provide a value for r or L."

ELSE IF the user (didn't leave both r AND L as NULL and) input a value for r, then
  IF the r value is greater than 0,
    Define val as a list of values from the CDPIE utility function using the r form of cdpie: -exp(-x/r).
  ELSE (the r value is not greater than 0),
    Define val as the following error message: "Please use r > 0."

ELSE IF the user (didn't leave both r AND L as NULL, did not include a value for r, but did) input a value for L, then
  IF the L value is greater than 0,
    Define val as a list of values from the CDPIE utility function using the L form of cdpie: -2^(-x/L).
  ELSE (the L value is not greater than 0),
    Define val as the following error message: "Please use L > 0."

RETURN val



ACTUAL CODE
cdpie = function(x, r = NULL, L = NULL){
  if (is.null(r) & is.null(L)){
    val = "Please provide a value for r or L."

  } else if (!is.null(r)){
    if (r != 0){
      val = -exp(-x/r)
    }else{
      val = "Please use r > 0"
    }

  } else if (!is.null(L)){
    if (L != 0){
      val = -2^(-x/L)
    }else{
      val = "Please use L > 0"
    }
  }
  return(val)
}

---------------------------------------------------------------

crpie

This function calculates values of Constant Relative Protected Income Evaluations (CRPIE)

PSEUDO CODE
The function takes the following parameters as inputs:

x: A numeric value or list.
gam: The value of gamma, the coefficient of relative risk aversion. This value is optional if a value for k is provided.
k: The value of k, the percent of income to protect. This value is optional if a value for gamma is provided.

IF the user does not input a value for gam OR k (leaving both of them as NULL),
  Define val as a warning message: "Please provide a value for gamma or k."

ELSE IF the user (didn't leave both gam AND k as NULL and) input a value for gam, then
  IF the gam value is not equal to 1,
    Define val as a list of values from the CRPIE utility function using the gamma form of crpie: x^(1-gam)/(1-gam).
  ELSE (the gam value is equal to 1),
    Define val as a list of values from the CRPIE utility function using the gamma form (when gamma = 1) of crpie: ln(x).

ELSE IF the user (didn't leave both gam AND k as NULL, did not include a value for gam, but did) input a value for k, then
  IF the k value is not equal to infinity,
    Define val as a list of values from the CRPIE utility function using the k form of crpie: log2(k) * x^(1/(log2(k))).
  ELSE (the k value is equal to infinity),
    Define val as a list of values from the CRPIE utility function using the k form (when k is infinity) of crpie: ln(x).

RETURN val



ACTUAL CODE
crpie = function(x, gam = NULL, k = NULL){
  if (is.null(gam) & is.null(k)){
    val = "Please provide a value for gamma or k."

  } else if (!is.null(gam)){
    if (gam != 1){
      val = x^(1-gam)/(1-gam)
    }else{
      val =log(x)
    }

  } else if (!is.null(k)){
    if (k != Inf){
      val = log2(k) * x^(1/(log2(k)))
    }else{
      val =log(x)
    }
  }
  return(val)
}

---------------------------------------------------------------

eete

This is the main function of this package and calculates the eete and the SE of the eete (with the option to include an IV).


Before defining the actual eete function, we define a "hidden" function to calculate the inverse of a function.

inverse_fun

PSEUDO CODE
The function takes the following parameters as inputs:

f: A function for which the inverse value needs to be found.
lower: The lower bound of the search interval.
upper: The upper bound of the search interval.


RETURN a function that takes y as an input
  and uses a base R function called uniroot to find the root of the equation f(x) - y = 0 (solving for x in the equation f(x) = y), where x is within the bounds set by lower and upper. The uniroot function returns several values, so it is indexed at 1 to just extract the root value.

ACTUAL CODE
inverse_fun = function (f, lower = -100, upper = 100) {
  function (y) uniroot((function (x) f(x) - y), lower = lower, upper = upper)[1]
}


Now that the inverse function is defined, we can define eete itself:

PSEUDO CODE
The function takes the following parameters as inputs:

inputFunction: A function that will be applied to the data.
... : Additional arguments to be passed to `inputFunction`.
y: The name of the outcome variable column in `data`.
d: The name of the treatment variable column in `data`.
z: Optional argument to include the name of the instrument variable column in `data`.
data: The data frame containing the variables.
lower: The lower bound for finding the inverse function value.
upper: The upper bound for finding the inverse function value.
se: Optional argument to calculate the standard error of the estimate with bootstrapping.
B: The number of iterations to be used in the standard error bootstrap.


First, the function makes sure that the input function is valid for y by creating a test data set with only the y column.
IF inputFunction returns a character when used on the test data (likely an error message),
  The return value will be set to the output of inputFunction

ELSE (if inputFunction did not return an error when used on y),
  Define the inverse function for the inputFunction using the lower and upper arguments as parameters.

  IF z is not null (there is an IV),
    Define an ee function to be used for bootstrapping that takes data and indices as its inputs
      Subset the data set to only the bootstrap sample
      Divide the bootstrap sample into 2 data sets: one where z = 1 and the other where z = 0
      Define yz1 and yz0 as the y column in the data set where z = 1 and z = 0, respectively
      Define p1 and p0 as the mean of the d column in the data set where z = 1 and z = 0, respectively
      Define fee_p1 and fee_p0 as the mean of the transformed (by inputFunction) yz1 and yz0, respectively
      Define fee1 as (((1 - p0) * fee_p1 - (1 - p1) * fee_p0) / (p1 - p0))
      Define fee0 as ((p1 * fee_p0 - p0 * fee_p1) / (p1 - p0))
      The return value is set as the difference between the inverse of fee1 and fee0 (using fun_inverse for inversion): (fun_inverse(fee1)$root - fun_inverse(fee0)$root)

  ELSE (z is null, there is no IV),
    Define an ee function to be used for bootstrapping that takes data and indices as its inputs
      Subset the data set to only the bootstrap sample
      Divide the bootstrap sample into 2 data sets: one where z = 1 and the other where z = 0
      Define yz1 and yz0 as the y column in the data set where z = 1 and z = 0, respectively
      Define fee1 and fee0 as the mean of the transformed (by inputFunction) yz1 and yz0, respectively
      The return value is set as the difference between the inverse of fee1 and fee0 (using fun_inverse for inversion): (fun_inverse(fee1)$root - fun_inverse(fee0)$root)

  Define eete as an instance of the ee function used on the entire data set (not a bootstrapped sample)

  IF the user set SE = TRUE (which is not the default),
    Use the boot function from the package "boot" to bootstrap the ee function
    Define the SE as the standard deviation of the list of bootstrap estimates
    Define eete as a list of the estimate and the SE
  ELSE (the user set SE = FALSE (which is the default)),
    Define eete as a list of the estimate

RETURN eete


ACTUAL CODE
eete = function(inputFunction, ..., y, d, z = NULL, data, lower = 0.1, upper = 100, se = FALSE, B = 1000) {

  data_test = data %>%
    dplyr::select(!!sym(y))

  if (is.character(inputFunction(data_test, ...))) {
    eete = inputFunction(data_test, ...)

  } else {

  fun_inverse = inverse_fun(function(x) inputFunction(x, ...), lower, upper)

  if (!is.null(z)) {

  ee = function(data, indices){

    bdata = data[indices,]

    data1 = bdata %>%
      dplyr::filter(!!sym(z) == 1)

    data0 = bdata %>%
      dplyr::filter(!!sym(z) == 0)

    yz1 = data1[[y]]
    yz0 = data0[[y]]
    p1 = mean(data1[[d]], na.rm = TRUE)
    p0 = mean(data0[[d]], na.rm = TRUE)

    fee_p1 = mean(inputFunction(yz1, ...), na.rm = TRUE)
    fee_p0 = mean(inputFunction(yz0, ...), na.rm = TRUE)
    fee1 = (((1 - p0) * fee_p1 - (1 - p1) * fee_p0) / (p1 - p0))
    fee0 = ((p1 * fee_p0 - p0 * fee_p1) / (p1 - p0))

    eete = (fun_inverse(fee1)$root - fun_inverse(fee0)$root)

    return(eete)
  }


  } else {

    ee = function(data, indices){

      bdata = data[indices,]

      data1 = bdata %>%
        dplyr::filter(!!sym(d) == 1)

      data0 = bdata %>%
        dplyr::filter(!!sym(d) == 0)

      yz1 = data1[[y]]
      yz0 = data0[[y]]

      fee1 = mean(inputFunction(yz1, ...), na.rm = TRUE)
      fee0 = mean(inputFunction(yz0, ...), na.rm = TRUE)

      eete = (fun_inverse(fee1)$root - fun_inverse(fee0)$root)

      return(eete)
    }

  }

  eete = ee(data, 1:nrow(data))

  if (se == TRUE) {

    boot_results = boot::boot(data, ee, R = B)
    se = sd(boot_results$t)

    eete = list(estimate = eete, se = se)

  } else {

    eete = list(estimate = eete)
  }
}
  return(eete)
}

---------------------------------------------------------------

ebounds

inputFunction: A function to apply to the outcome variable.
... : Additional arguments for the input function.
y: A string indicating the outcome variable column name.
d: A string indicating the selection or treatment variable column name.
z: A string indicating the instrument variable column name.
wgt: A vector of weights.
data: A data frame containing y, d, and z columns.


First, the function makes sure that the input function is valid for y by creating a test data set with only the y column.
IF inputFunction returns a character when used on the test data (likely an error message),
  The return value will be set to the output of inputFunction

ELSE (if inputFunction did not return an error when used on y),
  Define the bounds function to be used for bootstrapping that takes data and indices as its inputs

    Subset the data set to only the bootstrap sample and make the following modifications to the data:
      Rename the y, z, and d columns to "y", "z", and "s" (this is for consistency with the Stata code)
      Define the weights as a column in the data set of the parameter wgt OR 1s if the wgt parameter was not defined
      Transform the y column using the inputFunction provided
      Filter out rows where z is NA, s is not binary (0 or 1), or y is NA where s = 1
      Define nn as an indicator for the treated & s = 0 group (1 if in the group, 0 otherwise)
      Define ee as an indicator for the untreated & s = 1 group (1 if in the group, 0 otherwise)
      Define nn_ne as an indicator for the untreated & s = 0 group (1 if in the group, 0 otherwise)
      Define ee_ne as an indicator for the treated & s = 1 group (1 if in the group, 0 otherwise)

    Create a summary table from the bootstrap data with the weighted proportions of s = 1 and s = 0 in the treated and untreated groups (pr_nn, pr_ee, pr_ne_ee, pr_ee_ne) and the following modifcations:
      Define pr_ne (the difference between proportions of treated and untreated s = 1) as: pr_ee_ne - pr_ee
      Define pr_ne2 (the difference between proportions of treated and untreated s = 0) as: pr_nn_ne - pr_nn
      Define tprop as (the ratio of the proportion of treated to untreated for s = 1): tprop = (pr_ee / pr_ee_ne) * 100
      Define one_tprop as: 100 - tprop

    Create a summary table from the bootstrap data with the weighted means
      Define y_ee0 as the weighted mean y if employed and untreated
      Define y_11 as the weighted mean y if employed and treated)
      Define lower_y as the minimum value y
      Define upper_y as the maximum value of y

    Modify bdata in the following way
      Filter the data to include rows with s = 1 and z = 1
      Define rankp2 as rank(y), the ordered ranking of y values (for example, rankp2 = 1 indicates y in that row is the lowest value of y in the data)

    Define p10ovp11 as the tprop column in the props table
    Define cp10ovp11 as the one_tprop column in the props table
    Define y11povp as the quantiles of rankp2 using the probabilities stored in p10ovp11
    Define y11cpovp as the quantiles of rankp2 using the probabilities stored in cp10ovp11
    Define y_ee1_lb as the mean y for rows where rankp2 is less than the quantile in y11povp
    Define y_ee1_ub as the mean y for rows where rankp2 is greater than the quantile in y11cpovp
    Define Ya_l as the lower bound of outcome y for the treated
    Define Ya_u as the upper bound of outcome y for the untreated
    Define Yb_l as the lower bound of outcome y for the treated
    Define Yb_u as the upper bound of outcome y for the untreated

    Define LB_ee_mono as the difference of y_ee1_lb and y_ee0 (the weighted mean y if employed and untreated)
    Define UB_ee_mono as the difference of y_ee1_ub and y_ee0 (the weighted mean y if employed and untreated)
    Define UB_HM as the difference of Yb_u and Ya_l
    Define LB_HM as the difference of Yb_l and Ya_u

    Return LB_ee_mono, UB_ee_mono, LB_ee_dom, LB_HM, UB_HM, y_ee1_lb, y_ee1_ub, Ya_l, Ya_u, Yb_l, Yb_u

  Define all_results as a data frame with LB_ee_mono, UB_ee_mono, LB_ee_dom, LB_HM, UB_HM, y_ee1_lb, y_ee1_ub, Ya_l, Ya_u, Yb_l, Yb_u labels and values using the bounds function on all of the data

  IF se = TRUE (the user would like to calculate the standard errors too),
    Bootstrap the bounds function using the boot function from the package "boot"
    Define SE as a new column in the results table of the sd of the bootstrapped values
  ELSE (se = FALSE, which is the default)
    Keep all_results as the table of only estimates

RETURN all_results



ACTUAL CODE
ebounds = function(inputFunction, ..., y, d, z, wgt = NULL, data, se = FALSE, B = 1000){

  data_test = data |>
    dplyr::select(!!sym(y))

  if (is.character(inputFunction(data_test, ...))) {
    all_results = inputFunction(data_test, ...)

  } else {

    bounds = function(data, indices){

      bdata = data[indices,]

      bdata = bdata |>
        rename(y = !!sym(y),
               z = !!sym(z),
               s = !!sym(d)) |>
        mutate(wgt = ifelse(is.null(wgt), 1, wgt),
               y = inputFunction(y, ...)) |>
        filter(!is.na(z), s %in% c(0, 1), !(is.na(y) & s == 1)) |>
        mutate(nn = as.integer(z == 1 & s == 0), # treated and unemployed
               ee = as.integer(z == 0 & s == 1), # untreated and employed
               nn_ne = as.integer(z == 0 & s == 0), # untreated and unemployed
               ee_ne = as.integer(z == 1 & s == 1)) # treated and employed

      props = bdata |>
        summarise(pr_nn = sum(nn * wgt, na.rm = TRUE) / sum(wgt, na.rm = TRUE), # the proportion of unemployed in the treated group
                  pr_ee = sum(ee * wgt, na.rm = TRUE) / sum(wgt, na.rm = TRUE), # the proportion of employed in the untreated group
                  pr_nn_ne = sum(nn_ne * wgt, na.rm = TRUE) / sum(wgt, na.rm = TRUE), # the proportion of unemployed in the untreated group
                  pr_ee_ne = sum(ee_ne * wgt, na.rm = TRUE) / sum(wgt, na.rm = TRUE)) |> # the proportion of employed in the treated group
        mutate(pr_ne = pr_ee_ne - pr_ee,
               pr_ne2 = pr_nn_ne - pr_nn,
               tprop = (pr_ee / pr_ee_ne) * 100,
               one_tprop = 100 - tprop)

      means = bdata |>
        summarise(y_ee0 = weighted.mean(y[ee == 1], w = wgt[ee == 1], na.rm = TRUE), # the mean y if employed and untreated
                  y_11 = weighted.mean(y[ee_ne == 1], w = wgt[ee_ne == 1], na.rm = TRUE), # the mean y if employed and treated
                  lower_y = min(y, na.rm = TRUE),
                  upper_y = max(y, na.rm = TRUE))

      bdata = bdata |>
        filter(s == 1, z == 1) |>
        mutate(rankp2 = rank(y))


      p10ovp11 = props$tprop
      cp10ovp11 = props$one_tprop

      y11povp = quantile(bdata$rankp2, probs = p10ovp11 / 100, na.rm = TRUE)
      y11cpovp = quantile(bdata$rankp2, probs = cp10ovp11 / 100, na.rm = TRUE)

      y_ee1_lb = mean(bdata$y[bdata$rankp2 < y11povp], na.rm = TRUE)
      y_ee1_ub = mean(bdata$y[bdata$rankp2 > y11cpovp], na.rm = TRUE)
      Ya_l = props$pr_ee * means$y_ee0 + props$pr_nn * means$lower_y # the lower bound of outcome y for the untreated
      Ya_u = props$pr_ee * means$y_ee0 + props$pr_nn * means$upper_y # the upper bound of outcome y for the untreated
      Yb_l = props$pr_ee_ne * means$y_11 + props$pr_nn_ne * means$lower_y # the lower bound of outcome y for the treated
      Yb_u = props$pr_ee_ne * means$y_11 + props$pr_nn_ne * means$upper_y # the upper bound of outcome y for the treated

      LB_ee_mono = y_ee1_lb - means$y_ee0
      UB_ee_mono = y_ee1_ub - means$y_ee0
      LB_ee_dom = means$y_11 - means$y_ee0
      UB_HM = Yb_u - Ya_l
      LB_HM = Yb_l - Ya_u

      return(c(LB_ee_mono, UB_ee_mono, LB_ee_dom, LB_HM, UB_HM, y_ee1_lb, y_ee1_ub, Ya_l, Ya_u, Yb_l, Yb_u))
    }


    all_results = data.frame(Names = c("LB_ee_mono", "UB_ee_mono", "LB_ee_dom", "LB_HM", "UB_HM",
                                       "y_ee1_lb", "y_ee1_ub", "Ya_l", "Ya_u", "Yb_l", "Yb_u"),
                             Estimate = c(bounds(data, 1:nrow(data))))

  if (se == TRUE) {

    boot_results = boot::boot(data, bounds, R = B)

    all_results$SE = c(sd(boot_results$t[,1]),
                       sd(boot_results$t[,2]),
                       sd(boot_results$t[,3]),
                       sd(boot_results$t[,4]),
                       sd(boot_results$t[,5]),
                       sd(boot_results$t[,6]),
                       sd(boot_results$t[,7]),
                       sd(boot_results$t[,8]),
                       sd(boot_results$t[,9]),
                       sd(boot_results$t[,10]),
                       sd(boot_results$t[,11]))


  } else {

    all_results = all_results
  }
  }
  return(all_results)
}
